<html>
<META http-equiv="content-type" content="text/html; charset=utf-8">

<body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" role="banner" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">V&aacute; para o conte&uacute;do principal</a><div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Conta</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Configura&ccedil;&otilde;es</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Fazer logout</a></div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span></button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../-/-/-/welcome_page.htm" alt="Logo"></a></div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="2" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>espa&ccedil;o reservado</a></li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Conta</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Configura&ccedil;&otilde;es</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Fazer logout</a></div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filtro:</span><div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="Todos os arquivos" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">Todos os arquivos</span></button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Pesquisar" role="button" tabindex="0"><span class="invisible-label">Enviar pesquisa</span></div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div role="navigation" aria-label="Topic toolbar buttons" class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navegar para anterior" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navegue para o pr&oacute;ximo" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie print-button" title="Imprimir">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie select-language-button" title="Alterar idioma">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Change language">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/Brightspace_Help_TOC.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="False" data-mc-include-parent="True" data-mc-toc="True">
                                                    </ul>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">Voc&ecirc; est&aacute; aqui:</span></div>
                                                </div>
                                                <div role="main" id="mc-main-content">
                                                    <h1>Envie uma atividade</h1>
                                                    <p>A ferramenta de envio de atividades permite que voc&ecirc; envie atribui&ccedil;&otilde;es no ambiente de aprendizagem Brightspace, eliminando a necessidade de enviar e-mails, fax ou e-mails para os instrutores. Basta carregar seu envio para a tarefa apropriada e envi&aacute;-lo.</p>
                                                    <h2>Entender datas de vencimento e datas de t&eacute;rmino</h2>
                                                    <p class="bodytext">Uma data de entrega &eacute; o prazo de envio de uma tarefa no curso. Esta data &eacute; espec&iacute;fica apenas para atividades.</p>
                                                    <p class="bodytext">As datas finais s&atilde;o anexadas &agrave;s atribui&ccedil;&otilde;es. A data final &eacute; a data final em que uma atividade est&aacute; dispon&iacute;vel para envio, independentemente da data de vencimento. Depois que a data final da atividade tiver passado, voc&ecirc; n&atilde;o poder&aacute; mais enviar, n&atilde;o importa qual seja a data de vencimento da atividade.</p>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Exibir" data-mc-alt2="Hide" />Para enviar atividades</a></span><div class="MCDropDownBody dropDownBody">
                                                            <ol class="step">
                                                                <li class="step" value="1">Na barra de navega&ccedil;&atilde;o, clique <span class="uicontrol">em Atribui&ccedil;&otilde;es</span>.</li>
                                                                <li class="step" value="2"><span class="uicontrol">Na p&aacute;gina atividades </span>, clique na atividade &agrave; qual deseja enviar.</li>
                                                                <li value="3">
                                                                    <p>Siga as instru&ccedil;&otilde;es da atividade e siga um destes procedimentos:</p>
                                                                </li>
                                                                <ul>
                                                                    <li>
                                                                        <p>Digite sua atribui&ccedil;&atilde;o diretamente <b>no campo Envio de texto</b> . Quando terminar a resposta por escrito, clique <b>em Enviar</b>.</p>
                                                                    </li>
                                                                    <li class="step">Para procurar o arquivo que deseja enviar, clique <span class="uicontrol">em Adicionar um arquivo</span>. Voc&ecirc; pode anexar arquivos do computador local ou dispositivo de armazenamento, de um arm&aacute;rio pessoal, de um arm&aacute;rio do grupo ou do Brightspace ePortfolio. Insira os coment&aacute;rios que deseja enviar com o arquivo. Clique <b>em Enviar</b>.</li>
                                                                    <li class="step">Voc&ecirc; pode selecionar <span class="uicontrol">Gravar &aacute;udio</span> para adicionar feedback. Quando terminar uma grava&ccedil;&atilde;o, clique<span class="uicontrol"> em Adicionar</span>. Insira os coment&aacute;rios que deseja enviar com o arquivo. Clique <b>em Enviar</b>.</li>
                                                                    <li class="step">Clique <b>em Marcar como conclu&iacute;do</b> para marcar manualmente uma atividade como conclu&iacute;da.</li>
                                                                </ul>
                                                                <li class="step" value="4">Se o seu professor habilitou o feedback gramatical e-rater ®, para visualizar o feedback gramatical em sua tarefa, <b>na p&aacute;gina Hist&oacute;rico de envio</b> , clique no <b>link Exibir feedback gramatical e-rater®</b> na <b>coluna feedback em linha</b> .<ul><li class="step">Se a sua atividade permitir v&aacute;rios envios, voc&ecirc; poder&aacute; incorporar qualquer feedback gramatical e reenviar sua atividade.</li></ul></li>
                                                            </ol>
                                                            <p class="step"><b>Observa&ccedil;&otilde;es:</b></p>
                                                            <ul>
                                                                <li>Se a atribui&ccedil;&atilde;o estiver habilitada para o Turnitin, o arquivo enviado ser&aacute; pr&eacute;-validado no momento do envio para garantir que esteja dentro dos requisitos de tamanho e tipo de arquivo do Turnitin.</li>
                                                                <li>Se o GradeMark ou o OriginalityCheck tiver sido habilitado, voc&ecirc; poder&aacute; exibir seu <b>ID de Envio</b> na <b>p&aacute;gina Hist&oacute;rico de Envio</b> .</li>
                                                                <li>Dependendo das configura&ccedil;&otilde;es do curso, voc&ecirc; poder&aacute; exibir todas as rubricas usadas para avaliar seu trabalho diretamente na p&aacute;gina de envio.</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div role="contentinfo" aria-label="D2L legal and trademark information" class="footer center">
                                                    <div class="HomeMasterPageFooter outer-row">
                                                        <div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 8pt;">A fam&iacute;lia de empresas D2L inclui D2L Corporation, D2L Ltd, D2L Australia Pty Ltd, D2L Europe Ltd, D2L Asia Pte Ltd e D2L Brasil Solu&ccedil;&otilde;es de Tecnologia para Educa&ccedil;&atilde;o Ltda.<br />1999-2022 D2L Corporation.<br /><span style="font-size: 10pt;"><span style="font-size: 8pt;">Brightspace, D2L e outras marcas (&quot;marcas D2L&quot;) s&atilde;o marcas comerciais da D2L Corporation, registradas nos EUA e em outros pa&iacute;ses. Visite </span><a href="http://www.d2l.com/trademarks" style="font-size: 8pt;">www.d2l.com/trademarks</a><span style="font-size: 8pt;"> para obter uma lista de outras marcas da D2L.</span></span></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a></div>
            </div>
        </div>
    </body>
</html>

